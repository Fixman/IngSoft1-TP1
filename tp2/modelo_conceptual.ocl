context Cliente
	inv: self.viajes->size() <= 1
	inv: self.registro->empty() implies self.viajes->empty()

context Cliente::registrarseAlSistema()
   	pre: self.registro->empty()
		and TecnoTaxi.allInstances().usuarios->excludes(this)
	post: TecnoTaxi.allInstances().usuarios = TecnoTaxi.allInstances().usuarios@pre->including(this)

context Cliente::pedirTaxi(origen: direccion, destino: direccion)
   	pre: not self.registro->empty()
		and origen <> destino
		and this.viajes->select(this.viajes.origen = origen
		and this.viajes.destino = destino) -> empty()
	post: this.viajes->select(v.estado = EstadoDelViaje::pedido
		and this.viajes.origen = origen
		and this.viajes.destino = destino) -> size() = 1

context Cliente::cancelarPedido(v: viaje)
	pre: not self.registro->empty()
		and v.estado <> EstadoDelViaje::enMarcha
		and self.viajes->includes(v)
	post: not self.viajes->includes(v)

context Cliente::puntuarTaxista(v:viaje, puntaje: int)
	pre: not self.registro->empty()
		and v.estado <> EstadoDelViaje::terminado
		and self.viajes->includes(v)
	post: v.satisfaccion = puntaje
		and v@pre.conductor.puntuacion = (v@pre.conductor.puntuacion@pre * (v@pre.conductor.cantidadviajes - 1) + puntaje) / v@pre.conductor.cantidadviajes
	
context Cliente::pedirViajeRegular(frecuencia:time, inicio: time, origen: Direccion, destino: Direccion)
	pre: not self.registro->empty() and inicio>Today and frecuencia>0
	post: self.viajesregulares->size() = self.viajesregulares@pre->size() + 1
		and self.viajesregulares->select(v | v.horario = horario
		and v.origen = origen
		and v.destino = destino)->exists()
		and self.viajesregulares->excluding(self.viajesregulares->select(v | v.horario = horario and v.origen = origen and v.destino = destino)) = self.viajesregulares@pre

context Cliente::cancelarViajeRegular(viajeregular: ViajeRegular)
	pre: self.viajesregulares->includes(viajeregular)
	post: self.viajesregulares = self.viajesregulares@pre->excluding(viajeregular)

context Taxista
	inv: cantidadViajes >= 0
	inv: puntuacion >= 0
	inv: self.versionSoftware<=self.oficina.versionSistema
	inv: self.viajes->select(v| v.estado <> EstadoDelViaje::terminado)->size() <= 1

context Taxista::aceptarViaje(v: viaje)
	pre: v.estado = EstadoDelViaje::pedido
		and self.viajes->select(w | w.estado <> EstadoDelViaje::terminado)->isEmpty() 
	post: v.estado = EstadoDelViaje::aceptado
		and self.viajes->includes(v) 

context Taxista::rechazarViaje(v: viaje)
	pre: v.estado = EstadoDelViaje::pedido
		and self.viajes->includes(v)
	post: self.viajes = self.viajes@pre->excluding(v)

context Taxista::terminarViaje(v: viaje)
	pre: v.estado = EstadoDelViaje::enMarcha
		and self.viajes->includes(v) 
	post: v.estado = EstadoDelViaje::terminado
		and self.viajes->includes(v)
		and v.isKindOf(viajeRegular) implies v.pasajero.viajesRegulares->select(w | w.isKindOf(viajeRegular) and w.origen = v.origen and w.destino = v.destino and w.frecuencia = v.frecuencia and w.inicio = v.inicio + v.frecuencia and w.estado == EstadoDelViaje::pedido)->exists()

context Taxista::actualizarSoftware()
	pre: self.oficina.versionSistema <> self.versionSoftware
	post: self.oficina.versionSistema = self.versionSoftware

context Viaje
	inv: self.origen <> self.destino

context TecnoTaxi::nuevaVersion(version: int)
	pre: versionSistema < version
	post: versionSistema = version
